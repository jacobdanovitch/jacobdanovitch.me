"use strict";function setOfCachedUrls(a){return a.keys().then(function(a){return a.map(function(a){return a.url})}).then(function(a){return new Set(a)})}var precacheConfig=[["/jacobdanovitch/jacobdanovitch.github.io/index.html","d7897811fd2c54e598ef5e94be5be9ac"],["/jacobdanovitch/jacobdanovitch.github.io/static/css/main.6b69bc44.css","efa7f03b481705e1a1b48fdba6561a8b"],["/jacobdanovitch/jacobdanovitch.github.io/static/js/main.2ca3047d.js","67ba5884ddc96a10a4445333fcd9fc6a"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/R_logo.0d57c2c2.svg","0d57c2c2f2b9e19e1a221b6c7ef0dedb"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/SQLite_logo.79d07348.svg","79d07348b4d1c86bb906564bf078d2fd"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/aboutme.ff09a3f8.png","ff09a3f84fa3279afad2d1eb9216d4b2"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/algebraicon.a3dd8c04.svg","a3dd8c04081be3d72557941859567e54"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/bootstrap-plain-wordmark.76d7c6aa.svg","76d7c6aabe5de63af067918dc270986c"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/calculusicon.f7f02d64.svg","f7f02d647676576416ecbd4cc4f2f69d"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/carleton.13d24de5.jpg","13d24de5debd88a8ef771a66db5ebfda"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/carletonlogo.b6a13240.svg","b6a13240ca94cfc645e5c373a73c1be8"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/ccss.6f49ea20.png","6f49ea20c9c0d308fcd1e7707641b28c"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/csicon.813a17cf.svg","813a17cfb7d12b95422dfe5238a6a3ea"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/css3-plain-wordmark.df2a153b.svg","df2a153be11d45cef48915c68c951732"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/discreteicon.6a9f8715.svg","6a9f8715940a9520cc006d344ff549a7"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/git-plain-wordmark.46d7a154.svg","46d7a1547e9f13fb51d6a2c842838d36"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/github-original-wordmark.fff79394.svg","fff793948eaad4a21b6fb5712888d62d"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/headshot.51d3ab8d.jpg","51d3ab8d323e26ee3774a06fb9383677"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/html5-plain-wordmark.67d97895.svg","67d978951e48c3e185e053b9fefa8afb"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/java-original-wordmark.e6d87e2d.svg","e6d87e2dca08c953fe3acd1275ed4f4e"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/javascript-original.de79c8f1.svg","de79c8f14c2b0d692ae215d7e6eccd54"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/jetbrains-original.3a8572b3.svg","3a8572b347f48b346c867d1fa4c7a712"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/medimo.2f4c61f4.jpg","2f4c61f4305eaa1bf294a55c22b5cb19"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/mlb.a4d2d569.jpg","a4d2d569572e8235867dc21176f6092a"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/npm-original-wordmark.e83e60b3.svg","e83e60b310396562d703c9ccff616b91"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/python-original.3b84eb40.svg","3b84eb4026f0c704e7e3d16972bb0e3d"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/react-original-wordmark.fadd9c95.svg","fadd9c9566ccc46c6b0e73caca5860de"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/sf.ecff48ac.png","ecff48ac627919c07f7856b0b4f07376"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/skillsbg.84440460.jpeg","84440460961ad471515e8cf2d0ba95d8"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/slack-original-wordmark.5f95aec5.svg","5f95aec53410e4553a86801e92cdc2fe"],["/jacobdanovitch/jacobdanovitch.github.io/static/media/splash.5bedfb48.jpg","5bedfb48135227e89bbc00c0a6e042ed"]],cacheName="sw-precache-v3-sw-precache-webpack-plugin-"+(self.registration?self.registration.scope:""),ignoreUrlParametersMatching=[/^utm_/],addDirectoryIndex=function(a,e){var c=new URL(a);return"/"===c.pathname.slice(-1)&&(c.pathname+=e),c.toString()},cleanResponse=function(a){return a.redirected?("body"in a?Promise.resolve(a.body):a.blob()).then(function(e){return new Response(e,{headers:a.headers,status:a.status,statusText:a.statusText})}):Promise.resolve(a)},createCacheKey=function(a,e,c,t){var i=new URL(a);return t&&i.pathname.match(t)||(i.search+=(i.search?"&":"")+encodeURIComponent(e)+"="+encodeURIComponent(c)),i.toString()},isPathWhitelisted=function(a,e){if(0===a.length)return!0;var c=new URL(e).pathname;return a.some(function(a){return c.match(a)})},stripIgnoredUrlParameters=function(a,e){var c=new URL(a);return c.hash="",c.search=c.search.slice(1).split("&").map(function(a){return a.split("=")}).filter(function(a){return e.every(function(e){return!e.test(a[0])})}).map(function(a){return a.join("=")}).join("&"),c.toString()},hashParamName="_sw-precache",urlsToCacheKeys=new Map(precacheConfig.map(function(a){var e=a[0],c=a[1],t=new URL(e,self.location),i=createCacheKey(t,hashParamName,c,/\.\w{8}\./);return[t.toString(),i]}));self.addEventListener("install",function(a){a.waitUntil(caches.open(cacheName).then(function(a){return setOfCachedUrls(a).then(function(e){return Promise.all(Array.from(urlsToCacheKeys.values()).map(function(c){if(!e.has(c)){var t=new Request(c,{credentials:"same-origin"});return fetch(t).then(function(e){if(!e.ok)throw new Error("Request for "+c+" returned a response with status "+e.status);return cleanResponse(e).then(function(e){return a.put(c,e)})})}}))})}).then(function(){return self.skipWaiting()}))}),self.addEventListener("activate",function(a){var e=new Set(urlsToCacheKeys.values());a.waitUntil(caches.open(cacheName).then(function(a){return a.keys().then(function(c){return Promise.all(c.map(function(c){if(!e.has(c.url))return a.delete(c)}))})}).then(function(){return self.clients.claim()}))}),self.addEventListener("fetch",function(a){if("GET"===a.request.method){var e,c=stripIgnoredUrlParameters(a.request.url,ignoreUrlParametersMatching);(e=urlsToCacheKeys.has(c))||(c=addDirectoryIndex(c,"index.html"),e=urlsToCacheKeys.has(c));var t="/jacobdanovitch/jacobdanovitch.github.io/index.html";!e&&"navigate"===a.request.mode&&isPathWhitelisted(["^(?!\\/__).*"],a.request.url)&&(c=new URL(t,self.location).toString(),e=urlsToCacheKeys.has(c)),e&&a.respondWith(caches.open(cacheName).then(function(a){return a.match(urlsToCacheKeys.get(c)).then(function(a){if(a)return a;throw Error("The cached response that was expected is missing.")})}).catch(function(e){return console.warn('Couldn\'t serve response for "%s" from cache: %O',a.request.url,e),fetch(a.request)}))}});